{
	"info": {
		"_postman_id": "bd0cf24c-8ac6-44d7-869c-e37edcd7f887",
		"name": "QA Onboarding",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24773281"
	},
	"item": [
		{
			"name": "Get User List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    // Test code 200 -> Correct connection\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/users",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user and save his ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    // Test valid creation of user\r",
							"    // 201 -> user created\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// parse body and save id to variable\r",
							"var JsonData = JSON.parse(responseBody)\r",
							"\r",
							"// Failsafe to avoid null values if the user is already created\r",
							"if (JsonData.id != null){\r",
							"pm.environment.set(\"USER_ID\", JsonData.id);\r",
							"}\r",
							"\r",
							"pm.test(\"User ID got saved\", function(){\r",
							"\r",
							"    pm.expect(pm.environment.get(\"USER_ID\")).to.equal(JsonData.id)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{NAME}}\",\r\n    \"email\": \"{{EMAIL}}\",\r\n    \"gender\": \"{{GENDER}}\",\r\n    \"status\": \"{{STATUS}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify User Existence",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// parse body and save to variable\r",
							"var JsonData = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Enviroment variables match response body\", function(){\r",
							"\r",
							"    // Assert ID is the same since creation assignment\r",
							"    pm.expect(pm.environment.get(\"USER_ID\")).to.equal(JsonData.id)\r",
							"\r",
							"    //Assert name is the same as inputted data\r",
							"    pm.expect(pm.environment.get(\"NAME\")).to.equal(JsonData.name)\r",
							"\r",
							"    //Assert email adress is the same as inputted data\r",
							"    pm.expect(pm.environment.get(\"EMAIL\")).to.equal(JsonData.email)\r",
							"\r",
							"    //Assert gender is the same as inputted data\r",
							"    pm.expect(pm.environment.get(\"GENDER\")).to.equal(JsonData.gender)\r",
							"\r",
							"    //Assert status is the same as inputted data\r",
							"    pm.expect(pm.environment.get(\"STATUS\")).to.equal(JsonData.status)\r",
							"\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/users/{{USER_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit user name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{URL}}/users/{{USER_ID}}?name={{NAME_EDIT}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{USER_ID}}"
					],
					"query": [
						{
							"key": "name",
							"value": "{{NAME_EDIT}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify name change",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// parse body and save to variable\r",
							"var JsonData = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Name was changed in previous request\", function(){\r",
							"\r",
							"    //Assert name is now different from  inputted data\r",
							"    pm.expect(pm.environment.get(\"NAME\")).to.not.equal(JsonData.name)\r",
							"\r",
							"    //Assert name is the same as name_edit\r",
							"    pm.expect(pm.environment.get(\"NAME_EDIT\")).to.equal(JsonData.name)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/users/{{USER_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit name again via JSON body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{NAME}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users/{{USER_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify name change Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// parse body and save to variable\r",
							"var JsonData = JSON.parse(responseBody)\r",
							"\r",
							"pm.test(\"Name was changed in previous request\", function(){\r",
							"\r",
							"    //Assert name is now different from  inputted data\r",
							"    pm.expect(pm.environment.get(\"NAME\")).to.equal(JsonData.name)\r",
							"\r",
							"    //Assert name is the same as name_edit\r",
							"    pm.expect(pm.environment.get(\"NAME_EDIT\")).to.not.equal(JsonData.name)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/users/{{USER_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete created user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    // Test to ensure correct DELETE response\r",
							"    // No body = user deleted\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/users/{{USER_ID}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"{{USER_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{API KEY}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}